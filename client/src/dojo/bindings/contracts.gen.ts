
// Generated by dojo-bindgen on Tue, 17 Sep 2024 21:29:03 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `grimscape-campagn` contract
    function campagn() {
        const contract_name = "campagn";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "grimscape"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

    
        // Call the `signup` system with the specified Account and calldata
        const signup = async (props: { account: Account, name: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "signup",
                        calldata: [props.name],
                    },
                    "grimscape"
                );
            } catch (error) {
                console.error("Error executing signup:", error);
                throw error;
            }
        };
            

    
        // Call the `rename` system with the specified Account and calldata
        const rename = async (props: { account: Account, name: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "rename",
                        calldata: [props.name],
                    },
                    "grimscape"
                );
            } catch (error) {
                console.error("Error executing rename:", error);
                throw error;
            }
        };
            

    
        // Call the `create` system with the specified Account and calldata
        const create = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create",
                        calldata: [],
                    },
                    "grimscape"
                );
            } catch (error) {
                console.error("Error executing create:", error);
                throw error;
            }
        };
            

    
        // Call the `perform` system with the specified Account and calldata
        const perform = async (props: { account: Account, direction: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "perform",
                        calldata: [props.direction],
                    },
                    "grimscape"
                );
            } catch (error) {
                console.error("Error executing perform:", error);
                throw error;
            }
        };
            

    
        // Call the `multiperform` system with the specified Account and calldata
        const multiperform = async (props: { account: Account, directions: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "multiperform",
                        calldata: [props.directions.length, ...props.directions],
                    },
                    "grimscape"
                );
            } catch (error) {
                console.error("Error executing multiperform:", error);
                throw error;
            }
        };
            

        return {
            world, signup, rename, create, perform, multiperform
        };
    }

    return {
        campagn: campagn()
    };
}
